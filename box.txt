#include<stdlib.h>
#include<string.h>
#include<stdio.h>

void insert(int box_id, char* color, float length,float breadth,float height,float weight);
double avr_volume();;
double diff_min_max_volume();

struct Box
{
    int box_id;
    char color[100];
   // char phone[100];
    float length;
    float breadth;
    float height;
    float weight;
    struct Box *next;

}* head;

int main()
{
    head = NULL;
    int choice;
    char color[100];
   // char phone[100];
    int box_id;
    float length;
    float breadth;
    float height;
    float weight;

    printf("1 to insert Box details\n2 to display status of all boxes\n3 to find the box with given id\n4 to count all boxes with specific color"
           "\n5 to find average volume of all boxes\n6 to find diff btw min and max volume\n7 to find the box with max height"
            "\n8 to update weight of box with specific id\n9 to remove the box with given id\n");
    do
    {
        printf("\nEnter Choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
                printf("Enter BOx ID: ");
                scanf("%d", &box_id);
                printf("Enter color: ");
                scanf("%s", color);
                printf("Enter length: ");
                scanf("%f", &length);
                printf("Enter breadth: ");
                scanf("%f", &breadth);
                printf("Enter height: ");
                scanf("%f", &height);
                printf("Enter weight: ");
                scanf("%f", &weight);
                insert(box_id, color, length,breadth,height,weight);
                break;
            case 3:
                printf("Enter box ID to search: ");
                scanf("%d", &box_id);
                search(box_id);
                break;
            case 9:
                printf("Enter BOX ID to delete: ");
                scanf("%d", &box_id);
                Delete(box_id);
                break;
            case 8:
                printf("Enter BOX ID to update: ");
                scanf("%d", &box_id);
                update_weight(box_id);
                break;
            case 2:
                display();
                break;
            case 4:
                printf("Enter color: ");
                scanf("%s", color);
                printf("%d %s boxes found\n",box_same_color(color),color);
                break;
            case 5:
                printf("Average volume of all boxes is %lf",avr_volume());
                break;
            case 6:
                printf("difference between min and max volume of all boxes is %lf",diff_min_max_volume());
                break;
            case 7:
                printf("The box with maximum height is %d",box_max_height());
                break;
        }

    } while (choice != 0);

}
int box_max_height()
{
    struct Box *temp=head;
    int count=0,i=0,max_height_index;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
    }
    temp=head;
    double array_height[count],max_weight=0;
    count=0;
    while(temp!=NULL)
    {
        array_height[count]=temp->weight;
        count++;
        temp=temp->next;
    }
    max_weight=array_height[0];
    for(i=0;i<count;i++)
    {
        if(array_height[i]>max_weight){
            max_weight=array_height[i];
            max_height_index=i;
        }
    }
    return max_height_index;

}
double diff_min_max_volume()
{
    struct Box * temp1=head;
    double min=0,max=0;
    int count=0;
    while(temp1!=NULL)
    {
        count++;
        temp1=temp1->next;
    }
    double vol_all_boxes[count];
    struct Box *temp2=head;
    count=0;
    while(temp2!=NULL)
    {
        vol_all_boxes[count]=temp2->length*temp2->breadth*temp2->height;
        count++;
        temp2=temp2->next;
    }
    min=vol_all_boxes[0];
    int i=0;
    for(i=1;i<count;i++)
    {
        if(vol_all_boxes[i]<min)
            min=vol_all_boxes[i];
    }
    printf("\nmin volume of all boxes %lf",min);
    i=0;
    max=vol_all_boxes[0];
    for(i=1;i<count;i++)
    {
        if(vol_all_boxes[i]>max)
            max=vol_all_boxes[i];
    }
     printf("\nmax volume of all boxes %lf",max);
    return (min-max);
}

double avr_volume()
{
    struct Box * temp=head;
    double volume=0;
    int count=0;
    while(temp!=NULL)
    {
       // printf("\nentered while loop");
        volume=volume+(temp->length*temp->breadth*temp->height);
        count++;
        temp=temp->next;
    }
    return (volume/count);
}

int box_same_color(char* color)
{
     struct Box * temp = head;
     int count=0;
	while(temp!=NULL){
		if(strcmp(temp->color, color)==0){
        count++;
		}
		temp = temp->next;
	}
    return count;
}

void insert(int box_id, char* color, float length,float breadth,float height,float weight)
{

    struct Box * Box = (struct Box *) malloc(sizeof(struct Box));
	Box->box_id = box_id;
	strcpy(Box->color, color);
	//strcpy(Box->phone, phone);
	Box->length = length;
	Box->breadth = breadth;
	Box->height = height;
	Box->weight = weight;
	Box->next = NULL;

	if(head==NULL){
		// if head is NULL
		// set Box as the new head
		head = Box;
	}
	else{
		// if list is not empty
		// insert Box in beginning of head
		Box->next = head;
		head = Box;
	}

}

void search(int box_id)
{
    struct Box * temp = head;
	while(temp!=NULL){
		if(temp->box_id==box_id){
			printf("BOX ID: %d\n", temp->box_id);
			printf("color: %s\n", temp->color);
			//printf("Phone: %s\n", temp->phone);
			printf("length: %0.4f\n", temp->length);
			printf("breadth: %0.4f\n", temp->breadth);
			printf("height: %0.4f\n", temp->height);
			printf("weight: %0.4f\n", temp->weight);
			return;
		}
		temp = temp->next;
	}
	printf("Box with roll number %d is not found !!!\n", box_id);
}

void update_weight(int box_id)
{

    struct Box * temp = head;
	while(temp!=NULL){

		if(temp->box_id==box_id){
			printf("Record with BOX ID %d Found !!!\n", box_id);
			printf("Enter new weight: ");
			scanf("%f",&temp->weight);
			printf("weight of %d box updated Successfully!!!\n",box_id);
			return;
		}
		temp = temp->next;

	}
	printf("Box with roll number %d is not found !!!\n", box_id);

}

void Delete(int box_id)
{

    struct Box * temp1 = head;
	struct Box * temp2 = head;
	while(temp1!=NULL){

		if(temp1->box_id==box_id){

			printf("Record with BOX ID %d Found !!!\n", box_id);

			if(temp1==temp2){
				// this condition will run if
				// the record that we need to delete is the first node
				// of the linked list
				head = head->next;
				free(temp1);
			}
			else{
				// temp1 is the node we need to delete
				// temp2 is the node previous to temp1
				temp2->next = temp1->next;
				free(temp1);
			}

			printf("Record Successfully Deleted !!!\n");
			return;

		}
		temp2 = temp1;
		temp1 = temp1->next;

	}
	printf("Box with BOX ID %d is not found !!!\n", box_id);

}

void display()
{
    struct Box * temp = head;
	while(temp!=NULL){

		printf("BOX ID: %d\n", temp->box_id);
		printf("color: %s\n", temp->color);
		//printf("Phone: %s\n", temp->phone);
		printf("length: %f\n\n", temp->length);
		printf("breadth: %f\n\n", temp->breadth);
		printf("height: %f\n\n", temp->height);
		printf("weight: %f\n\n", temp->weight);
		temp = temp->next;

	}
}


